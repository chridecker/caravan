@page "/"
@using Blazored.Modal.Services
@using chd.Caravan.Mobile.UI.Components.Shared
@using chd.Caravan.Mobile.UI.Dtos
@using chd.Caravan.Mobile.UI.Interfaces


@if (this.connectedDevices.Any())
{
    <h1>Connected Devices</h1>
    <div class="devices">
        @foreach (var device in connectedDevices)
        {
            <div class="device @(this._currentSelectedDevice?.Id == device.Id ? "current" : "")">
                <div class="device-name">
                    @device.Name
                </div>
                <div class="device-id">
                    @device.UID
                </div>
            </div>
        }
    </div>
}

<FloatingActionNavigation FAIconActive="maginifying-glass" OnClick="this.OpenScanModal" TextActive="Start Scan">
    <FloatingActionButton FAClass="stop" OnClick="async ()=> await this.bLEManager.StopScanAsync()" Title="Stop Scan" />
</FloatingActionNavigation>

@code {
    [Inject] IModalService modal { get; set; }
    [Inject] IBLEManager bLEManager { get; set; }

    List<BLEDevice> connectedDevices = [];
    BLEDevice _currentSelectedDevice = null;

    protected override async Task OnInitializedAsync()
    {
        bLEManager.DeviceConnected += this.BleDevice_Connected;
        await base.OnInitializedAsync();
    }

    private async Task OpenScanModal()
    {
        var res = await this.modal.Show<ScanDevicesComponent>("Scan Devices").Result;
        await bLEManager.StopScanAsync();
        if (!res.Cancelled && res.Data is BLEDevice device)
        {
            await this.AddDevice(device);
        }
    }

    private async void BleDevice_Connected(object? sender, BLEDevice device)
    {
        connectedDevices.Add(device);
        await this.InvokeAsync(this.StateHasChanged);
    }

    private async Task AddDevice(BLEDevice device)
    {
        await this.bLEManager.ConnectDeviceAsync(device.Id);
    }
}