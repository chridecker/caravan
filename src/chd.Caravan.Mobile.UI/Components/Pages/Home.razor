@page "/"
@using Blazored.Modal.Services
@using chd.Caravan.Mobile.UI.Components.Shared
@using chd.Caravan.Mobile.UI.Constants
@using chd.Caravan.Mobile.UI.Dtos
@using chd.Caravan.Mobile.UI.Interfaces

<div class="home-content">
    <LoadingCard BatteryData="@_batteryData" SolarData="@_solarData" />


    @foreach (var device in this._ruuviData)
    {
        <SensorCard Time="DateTime.Now"
                    Name="@connectedDevices.FirstOrDefault(x => x.Id == device.Key).Name"
                    Value="device.Value.Temperature.Value"
                    Min="0"
                    Max="0" />
    }


    @if (this.connectedDevices.Any())
    {
        <div class="devices">
            @foreach (var device in connectedDevices)
            {
                <ConnectedDeviceComponent Device="device" IsCurrentDevice="(BLEDevice d) => this._currentSelectedDevice?.Id == d.Id" OnClick="async(BLEDevice d)=>this._currentSelectedDevice = d" />
            }
        </div>
    }

    <FloatingActionNavigation FAIconActive="magnifying-glass" OnClick="this.OpenScanModal" TextActive="Start Scan">

        @if (this._currentSelectedDevice is not null)
        {
            <FloatingActionButton FAClass="wrench" OnClick="this.OpenSettings" Title="Settings" />
            @if (this._currentSelectedDevice.IsStarted)
            {
                <FloatingActionButton FAClass="trash" OnClick="this.DisconnectDevice" Title="Disconnect" />
            }
            else
            {
                <FloatingActionButton FAClass="play" OnClick="async()=>await this.StartDevice(this._currentSelectedDevice)" Title="Start" />
            }
            @if (!this._savedDevices.Any(a => a.Id == this._currentSelectedDevice.Id))
            {
                <FloatingActionButton FAClass="floppy-disk" OnClick="this.SaveDevice" Title="Save" />
            }
            else
            {
                <FloatingActionButton FAClass="floppy-disk-circle-xmark" OnClick="this.DeleteDevice" Title="Delete" />
            }
        }
    </FloatingActionNavigation>

</div>
@code {
    [Inject] IDeviceStorageService deviceStorageService { get; set; }
    [Inject] IModalService modal { get; set; }
    [Inject] IBLEManager bLEManager { get; set; }

    List<SavedDevice> _savedDevices = [];
    List<BLEDevice> connectedDevices = [];
    BLEDevice _currentSelectedDevice = null;
    Dictionary<Guid, RuuviTagData> _ruuviData = [];
    VotronicSolarData _solarData = null;
    VotronicBatteryData _batteryData = null;

    protected override async Task OnInitializedAsync()
    {
        this._savedDevices = (await deviceStorageService.GetDevices()) ?? [];

        bLEManager.DeviceConnected += this.BleDevice_Connected;
        bLEManager.CharacteristicValueUpdated += this.CharacUpdate;

        foreach (var savedDevice in _savedDevices)
        {
            await bLEManager.ConnectDeviceAsync(savedDevice.Id);
        }

        await base.OnInitializedAsync();
    }

    private async Task DisconnectDevice()
    {
        await bLEManager.DisconnectDeviceAsync(this._currentSelectedDevice.Id);
        this._currentSelectedDevice.IsStarted = false;
        this.connectedDevices.Remove(this._currentSelectedDevice);
        this._currentSelectedDevice = null;
        await this.InvokeAsync(this.StateHasChanged);
    }

    private async Task StartDevice(BLEDevice device)
    {
        if (device.Type is Enums.EDeviceType.Ruuvi)
        {
            await this.bLEManager.SubscribeForServiceCharacteristicAsync(device.Id, BLEContants.NORDIC_UART_SVC, BLEContants.TX_CHARACTERISTIC);
            device.IsStarted = true;
        }
        else if (device.Type is Enums.EDeviceType.Votronic)
        {
            await this.bLEManager.SubscribeForServiceCharacteristicAsync(device.Id, BLEContants.VOTRONIC_SVC, BLEContants.BATTERY_CHARACTERISTIC);
            await this.bLEManager.SubscribeForServiceCharacteristicAsync(device.Id, BLEContants.VOTRONIC_SVC, BLEContants.SOLAR_CHARACTERISTIC);
            device.IsStarted = true;
        }
        await this.InvokeAsync(this.StateHasChanged);
    }

    private async Task SaveDevice()
    {
        if (this._currentSelectedDevice.Type is Enums.EDeviceType.Default) { return; }

        var saved = new SavedDevice()
            {
                Id = this._currentSelectedDevice.Id,
                Name = string.IsNullOrWhiteSpace(_currentSelectedDevice.DisplayName) ? _currentSelectedDevice.Name : _currentSelectedDevice.DisplayName,
                Type = this._currentSelectedDevice.Type,
                UID = this._currentSelectedDevice.UID
            };
        await this.deviceStorageService.AddDevice(saved);
        this._savedDevices = await this.deviceStorageService.GetDevices();
    }
    private async Task DeleteDevice()
    {
        var saved = this._savedDevices.FirstOrDefault(x => x.Id == this._currentSelectedDevice.Id);

        await this.deviceStorageService.RemoveDevice(saved);
        this._savedDevices = await this.deviceStorageService.GetDevices();
    }




    private async Task OpenScanModal()
    {
        var res = await this.modal.Show<ScanDevicesComponent>
    ("Scan Devices").Result;
        await bLEManager.StopScanAsync();
        if (!res.Cancelled && res.Data is BLEDevice device)
        {
            await this.AddDevice(device);
        }
    }

    private async Task OpenSettings()
    {
        var param = new ModalParameters{
    {nameof(DeviceSettingComponent.Device),this._currentSelectedDevice}
    };
        var modalResult = await this.modal.Show<DeviceSettingComponent>
            ("Settings", param).Result;
        await this.InvokeAsync(this.StateHasChanged);
    }

    private async void CharacUpdate(object? sender, BLECharactersiticsValueArgs args)
    {
        if (!connectedDevices.Any(a => a.Id == args.DeviceId)) { return; }
        var device = this.connectedDevices.FirstOrDefault(x => x.Id == args.DeviceId);
        if (device.Type == Enums.EDeviceType.Ruuvi
        && args.ServiceId == BLEContants.NORDIC_UART_SVC
        && args.CharacteristicId == BLEContants.TX_CHARACTERISTIC)
        {
            this._ruuviData[device.Id] = new RuuviTagData(args.Data);
        }
        else if (device.Type == Enums.EDeviceType.Votronic
        && args.ServiceId == BLEContants.VOTRONIC_SVC)
        {
            if (args.CharacteristicId == BLEContants.SOLAR_CHARACTERISTIC)
            {
                this._solarData = new(args.Data);
            }
            else if (args.CharacteristicId == BLEContants.BATTERY_CHARACTERISTIC)
            {
                this._batteryData = new(args.Data, 200);
            }
        }
        await this.InvokeAsync(this.StateHasChanged);
    }


    private async void BleDevice_Connected(object? sender, BLEDevice device)
    {
        var startAuto = this._savedDevices.Any(a => a.Id == device.Id);
        if (startAuto)
        {
            var sDev = _savedDevices.FirstOrDefault(a => a.Id == device.Id);
            device.DisplayName = sDev.Name;
            device.Type = sDev.Type;
        }
        connectedDevices.Add(device);
        if (startAuto)
        {
            await this.StartDevice(device);
        }

        await this.InvokeAsync(this.StateHasChanged);
    }

    private async Task AddDevice(BLEDevice device)
    {
        await this.bLEManager.ConnectDeviceAsync(device.Id);
        await this.InvokeAsync(this.StateHasChanged);
    }
}
