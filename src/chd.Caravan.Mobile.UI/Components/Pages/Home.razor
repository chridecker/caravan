@page "/"
@using Blazored.Modal.Services
@using chd.Caravan.Mobile.UI.Components.Shared
@using chd.Caravan.Mobile.UI.Constants
@using chd.Caravan.Mobile.UI.Dtos
@using chd.Caravan.Mobile.UI.Interfaces

<div class="home-content">
    <LoadingCard BatteryData="@_batteryData" SolarData="@_solarData" />


    @foreach (var device in this._ruuviData)
    {
        <SensorCard Time="DateTime.Now"
                    Name="@connectedDevices.FirstOrDefault(x => x.Id == device.Key).Name"
                    Value="device.Value.Temperature.Value"
                    Min="0"
                    Max="0" />
    }


    @if (this.connectedDevices.Any())
    {
        <div class="devices">
            @foreach (var device in connectedDevices)
            {
                <ConnectedDeviceComponent Device="device" IsCurrentDevice="(BLEDevice d) => this._currentSelectedDevice?.Id == d.Id" OnClick="async(BLEDevice d)=>this._currentSelectedDevice = d" />
            }
        </div>
    }

    <FloatingActionNavigation FAIconActive="magnifying-glass" OnClick="this.OpenScanModal" TextActive="Start Scan">
        @if (this._currentSelectedDevice is not null)
        {
            <FloatingActionButton FAClass="wrench" OnClick="this.OpenSettings" Title="Settings" />
        }
    </FloatingActionNavigation>

</div>
@code {
    [Inject] IModalService modal { get; set; }
    [Inject] IBLEManager bLEManager { get; set; }

    List<BLEDevice> connectedDevices = [];
    BLEDevice _currentSelectedDevice = null;
    Dictionary<Guid, RuuviTagData> _ruuviData = [];
    VotronicSolarData _solarData = null;
    VotronicBatteryData _batteryData = null;

    protected override async Task OnInitializedAsync()
    {
        bLEManager.DeviceConnected += this.BleDevice_Connected;
        bLEManager.CharacteristicValueUpdated += this.CharacUpdate;
        await base.OnInitializedAsync();
    }

    private async Task OpenScanModal()
    {
        var res = await this.modal.Show<ScanDevicesComponent>("Scan Devices").Result;
        await bLEManager.StopScanAsync();
        if (!res.Cancelled && res.Data is BLEDevice device)
        {
            await this.AddDevice(device);
        }
    }

    private async Task OpenSettings()
    {
        var param = new ModalParameters{
            {nameof(DeviceSettingComponent.Device),this._currentSelectedDevice}
        };
        _ = await this.modal.Show<DeviceSettingComponent>("Settings", param).Result;
    }

    private async void CharacUpdate(object? sender, BLECharactersiticsValueArgs args)
    {
        if (!connectedDevices.Any(a => a.Id == args.DeviceId)) { return; }
        var device = this.connectedDevices.FirstOrDefault(x => x.Id == args.DeviceId);
        if (device.Type == Enums.EDeviceType.Ruuvi
        && args.ServiceId == BLEContants.NORDIC_UART_SVC
        && args.CharacteristicId == BLEContants.TX_CHARACTERISTIC)
        {
            this._ruuviData[device.Id] = new RuuviTagData(args.Data);
        }
        else if (device.Type == Enums.EDeviceType.Votronic
        && args.ServiceId == BLEContants.VOTRONIC_SVC)
        {
            if (args.CharacteristicId == BLEContants.SOLAR_CHARACTERISTIC)
            {
                this._solarData = new(args.Data);
            }
            else if (args.CharacteristicId == BLEContants.BATTERY_CHARACTERISTIC)
            {
                this._batteryData = new(args.Data, 200);
            }
        }
        await this.InvokeAsync(this.StateHasChanged);
    }


    private async void BleDevice_Connected(object? sender, BLEDevice device)
    {
        connectedDevices.Add(device);
        await this.InvokeAsync(this.StateHasChanged);
    }

    private async Task AddDevice(BLEDevice device)
    {
        await this.bLEManager.ConnectDeviceAsync(device.Id);
    }
}
