@using Blazored.Modal.Services
@using chd.Caravan.Mobile.UI.Dtos
@using chd.Caravan.Mobile.UI.Interfaces

@if (services.Any())
{
    <div class="services">
        @foreach (var service in services)
        {
            <div class="service  @(this._selectedService?.Id == service.Id ? "current": "") " @onclick="async ()=>await this.SetCurrent(service)">
                @service.Name - @service.Id
                @if (this.charDict.TryGetValue(service.Id, out var charLst))
                {
                    <div class="characteristics">
                        @foreach (var charac in charLst)
                        {
                            <div class="charateristic" @onclick="async ()=> await this.ClickCharacter(charac,service)">
                                @charac.Id - @charac.Name (@charac.CanRead, @charac.CanWrite, @charac.CanUpdate)
                                @if (this.charValueDict.TryGetValue(charac.Id, out var val))
                                {
                                    @string.Join("-", val)
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter] public BLEDevice Device { get; set; }

    [Inject] IBLEManager bLEManager { get; set; }
    [Inject] IModalService modal { get; set; }

    private IEnumerable<BLEService> services = [];
    private BLEService _selectedService;
    private Dictionary<Guid, IEnumerable<BLECharacteristic>> charDict = [];
    private Dictionary<Guid, byte[]> charValueDict = [];

    protected override async Task OnInitializedAsync()
    {
        bLEManager.CharacteristicValueUpdated += this.Char_updat;
        this.services = await bLEManager.GetDeviceServices(this.Device.Id);
        await base.OnInitializedAsync();
    }

    private async Task ClickCharacter(BLECharacteristic e, BLEService s)
    {
        if (e.CanRead)
        {
            this.charValueDict[e.Id] = await bLEManager.ReadValue(this.Device.Id, s.Id, e);
        }
        else if (e.CanUpdate)
        {
            await bLEManager.SubscribeForServiceCharacteristicAsync(Device.Id, s.Id, e.Id);
        }

    }

    private async void Char_updat(object sender, BLECharactersiticsValueArgs e)
    {
        this.charValueDict[e.CharacteristicId] = e.Data;
        await this.InvokeAsync(this.StateHasChanged);
    }

    private async Task SetCurrent(BLEService service)
    {
        try
        {
            this._selectedService = service;
            var cLst = await bLEManager.GetServiceCharactersitics(Device.Id, service.Id);
            this.charDict[service.Id] = cLst;
        }
        catch (Exception ex)
        {
            await this.modal.ShowDialog(ex.Message, chd.UI.Base.Contracts.Enum.EDialogButtons.OK);
        }
        await this.InvokeAsync(this.StateHasChanged);
    }
}