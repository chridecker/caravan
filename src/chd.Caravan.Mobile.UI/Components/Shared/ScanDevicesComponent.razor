@using Blazored.Modal.Services
@using chd.Caravan.Mobile.UI.Dtos
@using chd.Caravan.Mobile.UI.Interfaces
@using chd.UI.Base.Contracts.Enum


<div class="device-scanner">
    <input type="text" @bind-value="this._filterText" @bind-value:event="oninput" />
    @if (this.foundDevices.Any())
    {
        <div class="devices">
            @foreach (var device in foundDevices.Where(x => string.IsNullOrWhiteSpace(this._filterText) || x.Name.Contains(this._filterText) ||x.UID.Contains(this._filterText)))
            {
                <div class="device @(this._currentDevice?.Id == device.Id ? "current" : "") " @onclick="()=>this._currentDevice = device">
                    <div class="device-name">
                        @device.Name
                    </div>
                    <div class="device-id">
                        @device.UID
                    </div>
                </div>
            }
        </div>
        <IconButton ButtonStyle="EButtonStyle.Primary" FAClass="plus" OnClick="this.Choose">Add</IconButton>
    }
</div>

@code {

    [CascadingParameter] public BlazoredModalInstance Modal { get; set; }
    [Inject] IBLEManager bLEManager { get; set; }

    List<BLEDevice> foundDevices = [];

    BLEDevice _currentDevice = null;
    private string _filterText;

    protected override async Task OnInitializedAsync()
    {
        bLEManager.DeviceDiscoverd += this.BleDevice_Discoverd;
        await bLEManager.StartScanAsync();
        await base.OnInitializedAsync();
    }

    private async Task Choose()
    {
        if (this._currentDevice is null) { await this.Modal.CloseAsync(ModalResult.Cancel()); }
        await this.Modal.CloseAsync(ModalResult.Ok(this._currentDevice));
    }
    private async void BleDevice_Discoverd(object? sender, BLEDeviceFoundArgs args)
    {
        foundDevices.Add(args.Device);
        await this.InvokeAsync(this.StateHasChanged);
    }
}