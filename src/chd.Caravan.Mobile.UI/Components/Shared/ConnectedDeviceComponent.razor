@using chd.Caravan.Mobile.UI.Constants
@using chd.Caravan.Mobile.UI.Dtos
@using chd.Caravan.Mobile.UI.Interfaces

<div class="device @(this.IsCurrentDevice.Invoke(Device) ? "current" : "") " @onclick="async()=>await this.OnClick(this.Device)">
    <div class="device-name">
        @(string.IsNullOrWhiteSpace(Device.DisplayName) ? Device.Name : Device.DisplayName) (@Device.Type)
    </div>
    <div class="device-id">
        @Device.UID
    </div>
</div>

@code {
    [Inject] IBLEManager bLEManager { get; set; }

    [Parameter] public BLEDevice Device { get; set; }
    [Parameter] public Func<BLEDevice, bool> IsCurrentDevice { get; set; }
    [Parameter] public Func<BLEDevice, Task> OnClick { get; set; }

    private PeriodicTimer _timer;

    private BLEService _batteryService;
    private BLECharacteristic _batteryLevel;

    private byte[] _batteryLevelValue = [];

    protected override async Task OnInitializedAsync()
    {
        // var svcs = await this.bLEManager.GetDeviceServices(Device.Id);
        // if (svcs.Any(a => a.Id == BLEConstants.BATTERY_SVC))
        // {
        //     this._batteryService = svcs.FirstOrDefault(x => x.Id == BLEConstants.BATTERY_SVC);
        //     var chars = await this.bLEManager.GetServiceCharactersitics(Device.Id, this._batteryService.Id);
        //     if (chars.Any(a => a.Id == BLEConstants.BATTERY_LEVEL))
        //     {
        //         this._batteryLevel = chars.FirstOrDefault(x => x.Id == BLEConstants.BATTERY_LEVEL);
        //     }

        // }
        // await this.ReadBatteryLevel();
        // this._timer = new(TimeSpan.FromSeconds(5));
        // this.Refresher();

        await base.OnInitializedAsync();
    }

    private async void Refresher()
    {
        while (await this._timer.WaitForNextTickAsync())
        {
            await this.ReadBatteryLevel();
            await this.InvokeAsync(this.StateHasChanged);
        }
    }
    private async Task ReadBatteryLevel()
    {
        if (this._batteryLevel is not null)
        {
            this._batteryLevelValue = await this.bLEManager.ReadValue(Device.Id, this._batteryService.Id, this._batteryLevel);
        }
    }

}