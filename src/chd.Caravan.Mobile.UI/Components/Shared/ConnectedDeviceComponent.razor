@using chd.Caravan.Mobile.UI.Constants
@using chd.Caravan.Mobile.UI.Dtos
@using chd.Caravan.Mobile.UI.Interfaces

<div class="device @(this.IsCurrentDevice.Invoke(Device) ? "current" : "") " @onclick="async()=>await this.OnClick(this.Device)">
    <div class="device-name">
        @(string.IsNullOrWhiteSpace(Device.DisplayName) ? Device.Name : Device.DisplayName) (@Device.Type)
        @if (this.Device.BatteryLevel.HasValue)
        {
            <Battery BatteryLevel="(double)this.Device.BatteryLevel" />
        }
    </div>
    <div class="device-id">
        @Device.UID
    </div>
</div>

@code {
    [Inject] IBLEManager bLEManager { get; set; }

    [Parameter] public BLEDevice Device { get; set; }
    [Parameter] public Func<BLEDevice, bool> IsCurrentDevice { get; set; }
    [Parameter] public Func<BLEDevice, Task> OnClick { get; set; }


    protected override async Task OnInitializedAsync()
    {

        await this.ReadBatteryLevel();

        await base.OnInitializedAsync();
    }


    private async Task ReadBatteryLevel()
    {
        var svcs = await this.bLEManager.GetDeviceServices(Device.Id);
        if (svcs.Any(a => a.Id == BLEConstants.BATTERY_SVC))
        {
            var batteryService = svcs.FirstOrDefault(x => x.Id == BLEConstants.BATTERY_SVC);
            var chars = await this.bLEManager.GetServiceCharactersitics(Device.Id, batteryService.Id);
            if (chars.Any(a => a.Id == BLEConstants.BATTERY_LEVEL && a.CanRead))
            {
                var batteryLevel = chars.FirstOrDefault(x => x.Id == BLEConstants.BATTERY_LEVEL);
                var data = await this.bLEManager.ReadValue(Device.Id, batteryService.Id, batteryLevel);
                if (data.Any())
                {
                    this.Device.BatteryLevel = data[0];
                }
            }
        }
    }
}