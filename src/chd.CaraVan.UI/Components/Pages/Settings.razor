@implements IDisposable
@inject ISettingManager settingManager
@inject IUpdateService updateService
@using chd.CaraVan.Contracts.Contants
@using chd.CaraVan.UI.Components.Pages.Cards
@using chd.CaraVan.UI.Dtos

<div class="settings">
    <div class="setting">
        <div class="setting-label">Rotate</div>
        <SwitchButton Checked="this.IsAutorotate()" CheckedChanged="this.ChangeAutorotate" />

    </div>
    <div class="setting rotationtime">
        <div class="setting-label">Time</div>
        <IconButton FAClass="minus" OnClick="()=>this.RotationTime(-1)" /> <input type="number" @bind-value="this.HomeSetting.RotationTime" /><IconButton FAClass="plus" OnClick="()=>this.RotationTime(1)" />
    </div>
    <div class="setting">
        <div class="setting-label">Restart</div>
        <Reboot RebootText="" Token="this._cts.Token" />
    </div>
</div>

@code {
    [Parameter] public HomeSettingDto HomeSetting { get; set; }

    private CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
    }

    private void ChangeAutorotate(bool val)
    {
        this.HomeSetting.AutorotateCarousel = val;
    }

    private void RotationTime(int add)
    {
        if (this.HomeSetting.RotationTime + add >= 0)
        {
            this.HomeSetting.RotationTime += add;
        }
    }

    private async Task<bool> IsAutorotate(CancellationToken cancellationToken = default) => this.HomeSetting.AutorotateCarousel;

    public void Dispose()
    {
        this._cts.Cancel();
        this._cts.Dispose();
    }
}