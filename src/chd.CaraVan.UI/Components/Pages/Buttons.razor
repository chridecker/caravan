@page "/buttons"
@using chd.CaraVan.UI.Components.Pages.Cards
@inject IPiManager piManager
@inject IAESManager manager

@if (this._pins is not null)
{
    <div style="display:grid">
        @foreach (var pin in this._pins.Where(x => x.Type != GpioType.None).OrderByDescending(o => o.Type).ThenBy(t => t.Name))
        {
            <SmartButton Checked="this.State(pin)" CheckedChanged="(x)=>Change(pin,x)" Text="@pin.Name"></SmartButton>
        }
    </div>
}
@code {
    private IEnumerable<GpioPinDto> _pins;
    private CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {
        this._pins = await piManager.GetGpioPins(this._cts.Token);

        await base.OnInitializedAsync();
    }

    private async Task<bool> State(GpioPinDto pin)
    {
        if (pin.Type == GpioType.Aes)
        {
            return await manager.IsActive;
        }
        else if (pin.Type == GpioType.Switch)
        {
            return await piManager.Read(pin.Pin);
        }
        return false;
    }
    private async Task Change(GpioPinDto pin, bool val)
    {
        if (pin.Type == GpioType.Aes)
        {
            if (val)
            {
                await manager.SetActive();
            }
            else
            {
                await manager.Off();
            }
        }
        else if (pin.Type == GpioType.Switch)
        {
            await piManager.Write(new PinWriteDto { Pin = pin.Pin, Value = val }, this._cts.Token);
        }
    }
}
